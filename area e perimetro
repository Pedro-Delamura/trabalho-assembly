.text
.globl main
main:
	ld $a0,$id			# obtém o id da memória
	beq $a0,1,retangulo		# branch para "retangulo" caso seja um retângulo
	beq $a0,2,triangulor		# branch para "triangulor" caso seja um triângulo retângulo
	beq $a0,3,trianguloi		# branch para "trianguloi" caso seja um triângulo isósceles
	beq $a0,4,circulo		# branch para "circulo" caso seja um círculo
	j erro				# pula para "erro"
retangulo:
	l.s $f12,$base        		# carrega o float $base em $f12                            
        l.s $f13,$altura		# carrega o float $altura em $f13
        l.s $f14,$zeroo			# carrega o float $zeroo em $f14 
	c.le.s 1,$f12,$f14		# verifica se o valor da base é inválido
	bc1t 1,erro			# branch para "erro" caso o valor da base seja inválido
	c.le.s 1,$f13,$f14		# verifica se o valor da altura é inválido
	bc1t 1,erro			# branch para "erro" caso o valor da altura seja inválido
        la $a0,$retangulo       	# carrega o conteúdo de $retangulo em $a0    
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$base			# carrega o float $base em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall				
        la $a0,$ealtura			# carrega o conteúdo de $ealtura em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$altura		# carrega o float $altura em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall				
        la $a0,$perimetro		# carrega o conteúdo de $perimetro em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$base             	# carrega o float $base em $f12
        l.s $f13,$altura		# carrega o float $altura em $f13
        l.s $f14,$dois			# carrega o float $dois em $f14
        mul.s $f12,$f12,$f14		# multiplica $f12 por $f14 e aloca o valor obtido em $f12
        mul.s $f13,$f13,$f14		# multiplica $f13 por $f14 e aloca o valor obtido em $f13
        add.s $f12,$f12,$f13		# soma $f12 e $f13 e aloca o valor obtido em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall				
        la $a0,$area			# carrega o conteúdo de $area em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$base                  # carrega o float $base em $f12
        l.s $f13,$altura		# carrega o float $altura em $f13
        mul.s $f12,$f12,$f13        	# multiplica $f12 por $f13 e aloca o valor obtido em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall				
        j fim				# pula para "fim"
subrotina:
	li $a0,0			# coloca 0 em $a0
loop:
	addi $a0,$a0,1			# incrementa $a0 em 1
	blt $a0,5,loop			# branch para "loop" caso o valor de $a0 seja menor que 5
	jr $ra				# jump para o ponto seguinte de onde foi chamado "subrotina"
triangulor:
	l.s $f12,$base        		# carrega o float $base em $f12                            
        l.s $f13,$altura		# carrega o float $altura em $f13
        l.s $f14,$zeroo			# carrega o float $zeroo em $f14 
	c.le.s 1,$f12,$f14		# verifica se o valor da base é inválido
	bc1t 1,erro			# branch para "erro" caso o valor da base seja inválido
	c.le.s 1,$f13,$f14		# verifica se o valor da altura é inválido
	bc1t 1,erro			# branch para "erro" caso o valor da altura seja inválido
	la $a0,$triangulor       	# carrega o conteúdo de $triangulor em $a0    
        li $v0,4			# imprime o conteúdo de $a0
        syscall
        l.s $f12,$base			# carrega o float $base em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall
        la $a0,$ealtura			# carrega o conteúdo de $ealtura em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$altura		# carrega o float $altura em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall
        la $a0,$perimetro		# carrega o conteúdo de $perimetro em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$base             	# carrega o float $base em $f12
        l.s $f13,$altura		# carrega o float $altura em $f13
        l.s $f14,$dois			# carrega o float $dois em $f14
        mul.s $f12,$f12,$f12		# multiplica $f12 por $f12 e aloca o resultado em $f12
	mul.s $f13,$f13,$f13		# multiplica $f13 por $f13 e aloca o resultado em $f13
	add.s $f12, $f12, $f13		# soma $f12 e $f13 e aloca o resultado em $f12
	sqrt.s $f14, $f12 		# extrai a raiz quadrada de $f12 e aloca o resultado em $f14
	l.s $f12,$base             	# carrega o float $base em $f12
        l.s $f13,$altura		# carrega o float $altura em $f13
        add.s $f12,$f12, $f13		# soma os valores de $f12 e $f13 e aloca em $f12
        add.s $f12, $f12, $f14		# soma os valores de $f12 e $f14 e aloca em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall
        la $a0,$area			# carrega o conteúdo de $area em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$base                  # carrega o float $base em $f12
        l.s $f13,$altura		# carrega o float $altura em $f13
        mul.s $f12,$f12,$f13        	# multiplica $f12 por $f13 e aloca o valor obtido em $f12
        l.s $f14,$dois			# carrega o float $dois em $f14
        div.s $f12, $f12, $f14		# divide o valor de $f12 pelo valor em $f14 e aloca em $f12 
        li $v0,2			# imprime o conteúdo de $f12
        syscall
        j fim				# pula para "fim"
trianguloi:
	l.s $f12,$base        		# carrega o float $base em $f12                            
        l.s $f13,$altura		# carrega o float $altura em $f13
        l.s $f14,$zeroo			# carrega o float $zeroo em $f14 
	c.le.s 1,$f12,$f14		# verifica se o valor da base é inválido
	bc1t 1,erro			# branch para "erro" caso o valor da base seja inválido
	c.le.s 1,$f13,$f14		# verifica se o valor da altura é inválido
	bc1t 1,erro			# branch para "erro" caso o valor da altura seja inválido
	la $a0,$trianguloi       	# carrega o conteúdo de $trianguloi em $a0    
        li $v0,4			# imprime o conteúdo de $a0
        syscall
        l.s $f12,$base			# carrega o float $base em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall
        la $a0,$ealtura			# carrega o conteúdo de $ealtura em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$altura		# carrega o float $altura em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall
        la $a0,$perimetro		# carrega o conteúdo de $perimetro em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall
        l.s $f12,$base             	# carrega o float $base em $f12
        l.s $f13,$altura		# carrega o float $altura em $f13
        l.s $f14,$dois			# carrega o float $dois em $f14
        div.s $f12, $f12, $f14		# divide $f12 por f$14 e aloca em f$12
        mul.s $f12,$f12,$f12		# multiplica $f12 por $f12 e aloca o resultado em $f12
	mul.s $f13,$f13,$f13		# multiplica $f13 por $f13 e aloca o resultado em $f13
	add.s $f12, $f12, $f13		# soma $f12 e $f13 e aloca o resultado em $f12
	sqrt.s $f14, $f12 		# extrai a raiz quadrada de $f12 e aloca o resultado em $f12
	l.s $f12,$base             	# carrega o float $base em $f12
	l.s $f13, $dois			# carrega o float $dois em $f13
        mul.s $f14, $f14, $f13		# multiplica $f14 por $f13 e aloca em $f14
        add.s $f12, $f12, $f14		# soma os valores de $f12 e $f14 e aloca em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall 
        la $a0,$area			# carrega o conteúdo de $area em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$base                  # carrega o float $base em $f12
        l.s $f13,$altura		# carrega o float $altura em $f13
        mul.s $f12,$f12,$f13        	# multiplica $f12 por $f13 e aloca o valor obtido em $f12
        l.s $f14,$dois			# carrega o float $dois em $f14
        div.s $f12, $f12, $f14		# divide o valor de $f12 pelo valor em $f14 e aloca em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall
        j fim				# pula para "fim"
circulo:
	l.s $f12,$raio             	# carrega o float $raio em $f12                            
        l.s $f14,$zeroo			# carrega o float $zeroo em $f14
	c.le.s 1,$f12,$f14		# verifica se o valor do raio é inválido
	bc1t 1,erro			# branch para "erro" caso o valor do raio seja inválido
	la $a0,$circulo       		# carrega o conteúdo de $circulo em $a0    
        li $v0,4			# imprime o conteúdo de $a0
        syscall
        l.s $f12,$raio			# carrega o float $raio em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall
        la $a0,$perimetro		# carrega o conteúdo de $perimetro em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$raio             	# carrega o float $raio em $f12
        l.s $f13,$pi			# carrega o float $pi em $f13
        l.s $f14,$dois			# carrega o float $dois em $f14
        mul.s $f12,$f12,$f13		# multiplica $f12 por $f13 e aloca o valor obtido em $f12
        mul.s $f12,$f12,$f14		# multiplica $f12 por $f14 e aloca o valor obtido em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall				
        la $a0,$area			# carrega o conteúdo de $area em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall				
        l.s $f12,$raio                  # carrega o float $raio em $f12
        l.s $f13,$pi			# carrega o float $pi em $f13
        mul.s $f12,$f12,$f12        	# multiplica $f12 por $f12 e aloca o valor obtido em $f12
        mul.s $f12,$f12,$f13        	# multiplica $f12 por $f13 e aloca o valor obtido em $f12
        li $v0,2			# imprime o conteúdo de $f12
        syscall 
	j fim				# pula para "fim"
erro:
	la $a0,$erro                	# carrega o conteúdo de $erro em $a0
        li $v0,4			# imprime o conteúdo de $a0
        syscall
fim:
	jal subrotina			# pula para "subrotina" e se liga com a parte atual do código
        li $v0,10			# termina
        syscall
.data

########################################## PARÂMETROS ##########################################
$id: .word 1 # ID: 1 = RETÂNGULO; 2 = TRIÂNGULO RETÂNGULO; 3 = TRIÂNGULO ISÓSCELES; 4 = CÍRCULO
$base: .float 40 # base para retângulo ou triângulo
$altura: .float 10 # altura para retângulo ou triângulo
$raio: .float 1 # raio para círculo
########################################## PARÂMETROS ##########################################

####################### NÃO MODIFICAR #######################
$retangulo: .asciiz "Retângulo de base "
$triangulor: .asciiz "Triângulo retângulo de base "
$trianguloi: .asciiz "Triângulo isósceles de base "
$circulo: .asciiz "Círculo de raio "
$ealtura: .asciiz " e altura "
$erro: .asciiz "Parâmetro(s) inválido(s)"
$espaço: .asciiz " "
$perimetro: .asciiz "\nPerímetro: "
$area: .asciiz "\nÁrea: "
$zeroo: .float 0
$dois: .float 2
$pi: .float 3.14159
####################### NÃO MODIFICAR #######################
